/************************************************************************************
COPYRIGHT © 2001 Celsis Limited
All International Rights Reserved
(This work is unpublished)

CONFIDENTIAL TRADE SECRET
This material is the property of Celsis Limited and may not be 
used, copied, or distributed in any form without written 
permission from Celsis.

     Celsis Limited
     Cambridge Science Park
     Milton Road, Cambridge, CB4 0FX, UK
     Telephone: +44 (0)1223 426008
     Facsimile:   +44 (0)1223 426003
     Web address: http://www.Celsis.com

FILE STATUS
Design Specification:  887/S/02

Modifications:
(WHO)           DD-MMM-YY   		(REASON)
ITL				01-Sept-01			New documentation base line of version 2.1.7

************************************************************************************/


// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "acctrl.h"

/////////////////////////////////////////////////////////////////////////////
// CACalcCtrl

IMPLEMENT_DYNCREATE(CACalcCtrl, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CACalcCtrl properties

CString CACalcCtrl::GetLibraryName()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CACalcCtrl::SetLibraryName(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

long CACalcCtrl::GetLibraryVersion()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CACalcCtrl::SetLibraryVersion(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

long CACalcCtrl::GetMethodCount()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CACalcCtrl::SetMethodCount(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CACalcCtrl operations

LPDISPATCH CACalcCtrl::GetMethodPtr(long methodID)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		methodID);
	return result;
}

long CACalcCtrl::GetMethodID(long iMethod)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iMethod);
	return result;
}
